{"version":3,"sources":["SubmitForm.js","App.js","serviceWorker.js","index.js"],"names":["SubmitForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","taskName","type","justify","this","onChange","placeholder","onClick","React","Component","Paragraph","Typography","ToDoDragDropDemo","tasks","onDragStart","console","log","dataTransfer","setData","onDragOver","onDrop","category","getData","tasksValue","JSON","parse","localStorage","getItem","filter","task","setItem","stringify","addTask","push","confirmDelete","json","i","length","splice","inProgress","Done","forEach","style","display","justifyContent","size","key","draggable","className","title","onConfirm","okText","cancelText","href","span","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd858fe1.chunk.js","sourcesContent":["import React from 'react';\nimport shortid from 'shortid';\nimport { Input, Button, Row } from 'antd';\n\nexport default class SubmitForm extends React.Component {\n\n\tstate = {\n\t\ttext: \"\",\n\t}\n\n\thandleChange = event => {\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value\n\t\t})\n\t}\n\n\thandleSubmit = event => {\n\t\t\n\t\tevent.preventDefault()\n\t\t\n\t\tthis.props.onSubmit({\n\t\t\tid : shortid.generate(),\n\t\t\ttaskName : this.state.text,\n\t\t\ttype: \"inProgress\",\n\t\t})\n\t\tthis.setState({\n\t\t\ttext: \"\",\n\t\t})\n\t}\n\n  render() {\n    return(\n    \t<div>\n    \t<Row type=\"flex\" justify=\"center\">\n      <form onSubmit = {this.handleSubmit}>\n\t\t\t\t\t<Input name = \"text\" \n\t\t\t\t\tvalue = {this.state.text}\n\t\t\t\t\tonChange = {this.handleChange}\n\t\t\t\t\tplaceholder = \"todos...\"\n\t\t\t\t\t />\n\t\t\t\t<Button onClick = {this.handleSubmit}>Submit</Button>\n\t\t  </form>  \n\t\t  </Row>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Typography, Popconfirm } from 'antd';\nimport SubmitForm from './SubmitForm';\n\nconst { Paragraph } = Typography;\n\nexport default class ToDoDragDropDemo extends Component {\n  \n  state = {\n    tasks: []\n  }\n\n  componentDidMount(){\n    console.log('Mounting Component')\n    const tasks = JSON.parse(localStorage.getItem('tasks'))\n    if (tasks===null){\n      return false\n    }\n    else{\n      this.setState({\n        tasks: tasks\n      })\n      console.log(this.state.tasks)\n    }\n  }\n\n  onDragStart = (event, taskName) => {\n      console.log('dragstart on div: ', taskName);\n      event.dataTransfer.setData(\"taskName\", taskName);\n  }\n  \n  onDragOver = (event) => {\n      event.preventDefault();\n  }\n\n  onDrop = (event, category) => {\n      let taskName = event.dataTransfer.getData(\"taskName\");\n\n      let tasksValue = JSON.parse(localStorage.getItem('tasks'))\n      tasksValue.filter((task) => {\n          if (task.taskName === taskName) {\n              task.type = category;\n          }\n          return task;\n      });\n      this.setState({\n        ...this.state,\n        tasks: tasksValue\n      })\n      localStorage.setItem('tasks', JSON.stringify(tasksValue))\n  }\n\n  addTask = task => {\n    \n    console.log('added todo',task)\n    if(localStorage.getItem('tasks')===null){\n      const tasks = []\n      tasks.push(task)\n      localStorage.setItem('tasks', JSON.stringify(tasks))\n    }\n    else {\n      const tasks = JSON.parse(localStorage.getItem('tasks'))\n      tasks.push(task)\n      localStorage.setItem('tasks', JSON.stringify(tasks))\n    }\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks'))\n    })\n  }\n\n  confirmDelete = id => {\n    console.log('deleted todo')\n    let json = JSON.parse(localStorage['tasks'])\n    for (let i = 0; i< json.length; i++){\n      if(json[i].id === id){\n        json.splice(i,1)\n      }\n    }\n    localStorage['tasks'] = JSON.stringify(json)\n    this.setState({\n      tasks: json\n    })\n  }\n\n  render() {\n    var tasks = {\n        inProgress: [],\n        Done: []\n      }\n\n    this.state.tasks.forEach ((task) => {\n      tasks[task.type].push(\n          <div style = {{\n    display : \"flex\", justifyContent : 'center'\n  }}>      \n        <Paragraph \n          size = \"large\"\n          key={task.id} \n          onDragStart = {(event) => this.onDragStart(event, task.taskName)}\n          draggable\n          className=\"draggable\">\n          {task.taskName}\n        </Paragraph>\n        <Popconfirm\n          title=\"Are you sure delete this task?\"\n          onConfirm={()=> this.confirmDelete(task.id)}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <a href=\"#\"> &nbsp; Delete </a>\n        </Popconfirm>   \n        </div>\n      );\n    });\n \n      return (\n        <div className = \"drag-container\" >\n             \n          <h2 className=\"head\">To Do List</h2>\n          <br/>\n          <SubmitForm onSubmit={this.addTask}/> \n        <Row>\n        <Col span = {3}></Col>\n  \n        <Col span = {6}>\n        <Paragraph className=\"inProgress\" \n          onDragOver={(event)=>this.onDragOver(event)}\n            onDrop={(event)=>{this.onDrop(event, \"inProgress\")}}>\n            <h3>In Progress</h3>\n            {tasks.inProgress}\n        </Paragraph>\n        </Col>\n  \n        <Col span = {6}>\n        </Col>\n  \n        <Col span = {6}>\n          <Paragraph className=\"droppable\"\n            onDragOver={(event)=>this.onDragOver(event)}\n              onDrop={(event)=>this.onDrop(event, \"Done\")}>\n            <h3>Done</h3>\n            {tasks.Done}\n          </Paragraph>\n        </Col>\n  \n        <Col span = {3}></Col> \n        </Row>         \n        </div>\n      );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter>\n    \t<App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}